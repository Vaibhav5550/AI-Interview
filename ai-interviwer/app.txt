import streamlit as st
import PyPDF2
from openai import OpenAI
import os
from dotenv import load_dotenv
import ast
from gtts import gTTS
from playsound import playsound
import json
import speech_recognition as sr
load_dotenv()
client = OpenAI()
def generate_interview_question(resume_summary, job_role):
    prompt = f"""
    Generate a list of technical interview questions tailored for a candidate applying for the '{job_role}' position. 
    Base the questions on the candidate's experience, as summarized in: '{resume_summary}', with a focus on skills relevant to the job role. 
    Provide the questions in list format, with no preamble or numbering.

    Example:
    [
    "First question",
    "Second question",
    "Third question"
    ]
    """

    response = client.chat.completions.create(
     model="gpt-4o", # or "text-davinci-003" depending on the model
        messages=[
            {"role": "user", "content": prompt}
        ],
        temperature=1,
    )
    # print('➡ response:', response)
    
    return{"questions": response.choices[0].message.content}

def parse_pdf(uploaded_resume):
    reader = PyPDF2.PdfReader(uploaded_resume)
    text = ""
    for page in reader.pages:
        text += page.extract_text() or ""
    return text

def extract_resume_info(resume_text):
    prompt = (
        "Extract the following information from the resume:\n"
        "1. Name\n"
        "2. Contact Information\n"
        "3. Education\n"
        "4. Skills\n"
        "5. Experience\n\n"
        f"Resume text:\n{resume_text}\n\n"
        "Provide the information in JSON format."
    )
   

    response = client.chat.completions.create(
     model="gpt-4o",  # Use the appropriate model
        messages=[
            {"role": "user", "content": prompt}
        ],
        temperature=0.2,
    )
    return{"response": response.choices[0].message.content}

def text_to_speech(question):
    tts = gTTS(text=question, lang='en')
    tts.save("question.mp3")
    playsound("question.mp3")
    print("Interviwer's Question : ",question)
    return tts.save("question.mp3")

def speech_to_text():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        recognizer.adjust_for_ambient_noise(source)  # Adjust for ambient noise
        full_answer = []  # List to hold parts of the answer

        while True:
            print("Listening... (Press Enter to stop)")
            audio = recognizer.listen(source)  # Listen for the user's speech
            
            try:
                # Convert audio to text using Google Web Speech API
                answer = recognizer.recognize_google(audio)
                print("Interviewee (You):", answer)  # Optional: Print the recognized speech
                
                print("\n")

                full_answer.append(answer)
                  # Append the answer to the list

                
                if input() == "":  # Wait for Enter key
                    print("\n")
                    print("-----------------------------------------Next Question-----------------------------------------")
                    print("\n")

                    break
                    


            except sr.UnknownValueError:
                return ("Sorry, I could not understand the audio. Please try again.")
            except sr.RequestError as e:
                print(f"Could not request results from Google Speech Recognition service; {e}")
                break

    return ' '.join(full_answer)

uploaded_pdf= f"Dhrumit_AI_ML_Resume.pdf"

job_role="AI ML DEVELOPER"
interviewee = name + " ("+job_role+")"


# job_role= input('enter job role:\n')
resume_text = parse_pdf(uploaded_pdf)
print("Resume uploaded successfully!")
print("--------------------------------------------------------------------------------------------------------------------------")
print("\n")

print(interviewee)
print("\n")
print("----------------------------------------------------INTERVIEW  STARTED----------------------------------------------------")
#print("Extracted Text", resume_text)

            
resume_info = extract_resume_info(resume_text)
questions = generate_interview_question(resume_info,job_role)
#print('➡ questions:', questions)

converted_list = ast.literal_eval(questions["questions"])
           

#print('➡ json_response:', type(converted_list))

def match_que(question, answer):
    prompt = f"""
    Evaluate the following answer based on the given question. Consider accuracy, completeness, and relevance to the topic. Provide feedback on correctness with a score between 0 and 10, where 10 is fully correct. No preamble in the response, just the score and feedback.

    Question: {question}
    Answer: {answer}
    """
    response = client.chat.completions.create(
    model="gpt-4o",  # or "text-davinci-003"
    messages=[
        {"role": "user", "content": prompt}
    ],
    temperature=1,
)

    return {"question": question, "answer": answer,"feedback": response.choices[0].message.content}
    #return{"questions": response.choices[0].message.content}


report_lst=list()
for question in converted_list:
    text_to_speech(question)

    answer=speech_to_text()
    report=match_que(question, answer)
    report_lst.append(report)


with open('report.json','w') as f:
    f.write(json.dumps(report_lst, indent=4))